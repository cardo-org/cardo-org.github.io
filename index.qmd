---
title: "Messaging for Scientific Computing"
---

The goal of Rembus is to be a messaging middleware for
systems where the mains building blocks are scientific computing
and components decoupling using microservices architectural
patterns.

::: {.grid}

::: {.g-col-6}
## RPC

Rembus provides the request/reply pattern where a component request
a service and another component implements and expose such service. 

There may be multiple components exposing the same service and
different logics for routing the request to a specific server, 
implementing fail-over or balancing features.  


:::
::: {.g-col-6}
## Publish/Subscribe

One component produce a message and one or many interested subscribers
receive the message.

When a component goes online again the retroactive feature enable
the delivery of messages published when a subscribed component was offline.

:::
::: {.g-col-6}
## Brokerless

In a simple scenario or where a Broker may be redundant or tought as a 
single point of failure a brokerless architecture consents peer to peer
comunication between components.
:::

::: {.g-col-6}
## DataFrames support

Rembus uses the [Arrow](https://arrow.apache.org/) columnar format to transport
dataframes messages between components.

Julia, Python and Rust components may exchange dataframes betweeen
[DataFrames.jl](https://dataframes.juliadata.org/stable/),
[Pandas](https://pandas.pydata.org/) and [Polars](https://docs.pola.rs/) libraries.

:::
:::
