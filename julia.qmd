---
title: "Julia"
---

[Rembus.jl](https://github.com/cardo-org/Rembus.jl) is the Julia implementation of Rumbus specification: it provides a broker implementation and the API for Rembus components. 

## Getting Started

Install the `Rembus` package and wait about 1 minute for downloading and precompilation steps. 

```bash
julia> import Pkg; Pkg.add("Rembus")
   Resolving package versions...
   Installed Rembus ─ v0.1.0
  No Changes to `/tmp/prova/Project.toml`
  No Changes to `/tmp/prova/Manifest.toml`
Precompiling project...
  1 dependency successfully precompiled in 66 seconds. 75 already precompiled.
  1 dependency had output during precompilation:
┌ Rembus
│  [2024-04-10T10:28:09.472][Rembus][1][Info] caronte up and running at port tcp:8001
│  [2024-04-10T10:28:09.742][Rembus][1][Info] caronte up and running at port ws:8000
│  [2024-04-10T10:28:12.413][Rembus][1][Info] caronte up and running at port zmq:8002
│  [2024-04-10T10:28:17.279][HTTP.Servers][1][Info] Listening on: 0.0.0.0:8000, thread id: 1
│  [2024-04-10T10:28:32.519][HTTP.Servers][1][Info] Server on 0.0.0.0:8000 closing

julia>
```
Once the package is installed starts the broker:

```bash
shell> julia -e 'using Rembus; caronte()'
```
The following output shows when `caronte` broker start successfully:


```bash
[2024-04-10T09:45:05.822][Rembus][1][Info] caronte up and running at port tcp:8001
[2024-04-10T09:45:05.822][Rembus][1][Info] caronte up and running at port ws:8000
[2024-04-10T09:45:05.822][Rembus][1][Info] caronte up and running at port zmq:8002
[2024-04-10T09:45:05.823][HTTP.Servers][1][Info] Listening on: 0.0.0.0:8000, thread id: 1
```

This finishes the setup, now you are ready to implements your Rembus components.


### Test broker services (RPC)  

The `caronte` broker implements itself the `version` and `uptime` services that unsurprisingly returns the broker version and the time in seconds since last reboot, use them to check that `caronte` is up and running:


```julia
using Rembus

@rpc version()
"0.1.0"

@rpc uptime()
"up for 15 seconds"
```

### Implements a service (RPC)

The `stats` service expects a dataframe as input and returns
some statistics on the value column.

The returned value is a Dictionary.

```julia
using Statistics
using Rembus

# Return a stat summary of dataframes values
# from value column.
function stats(df)
    return Dict(
        "min" => min(df.value...),
        "max" => max(df.value...),
        "mean" => mean(df.value),
        "std" => std(df.value)
    )
end

@expose stats

```

This is a microservice implementation that can be used by all Rembus components.

In the following we use a Julia client component and in the Python section we request the `stats` service for a pandas dataframe.

### Request a service (RPC)

A client component that use the `stats` service will just prefix
with `@rpc` what appears as a function call:

```julia
using DataFrames
using Rembus

df = DataFrame(:name=>["kpi_$i" for i in 1:5], :ts=>1:5, :value=>rand(5))

summary = @rpc stats(df)

```